# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Developer {
  id: ID!
  title: String
  logo: Image
  logoSymbol: Image
  favicon: Image
  address: String
  mapCoordinates: String
  googleMapLink: String
  phone: String
  email: String
  description: String
  tagLine: JSON
  optionalTagLine: JSON
}

input DeveloperWhereUniqueInput {
  id: ID
}

input DeveloperWhereInput {
  AND: [DeveloperWhereInput!]
  OR: [DeveloperWhereInput!]
  NOT: [DeveloperWhereInput!]
  id: IDFilter
  title: StringFilter
  logo: ImageWhereInput
  logoSymbol: ImageWhereInput
  favicon: ImageWhereInput
  address: StringFilter
  mapCoordinates: StringFilter
  googleMapLink: StringFilter
  phone: StringFilter
  email: StringFilter
  description: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DeveloperOrderByInput {
  id: OrderDirection
  title: OrderDirection
  address: OrderDirection
  mapCoordinates: OrderDirection
  googleMapLink: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  description: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input DeveloperUpdateInput {
  title: String
  logo: ImageRelateToOneForUpdateInput
  logoSymbol: ImageRelateToOneForUpdateInput
  favicon: ImageRelateToOneForUpdateInput
  address: String
  mapCoordinates: String
  googleMapLink: String
  phone: String
  email: String
  description: String
  tagLine: JSON
  optionalTagLine: JSON
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input DeveloperUpdateArgs {
  where: DeveloperWhereUniqueInput!
  data: DeveloperUpdateInput!
}

input DeveloperCreateInput {
  title: String
  logo: ImageRelateToOneForCreateInput
  logoSymbol: ImageRelateToOneForCreateInput
  favicon: ImageRelateToOneForCreateInput
  address: String
  mapCoordinates: String
  googleMapLink: String
  phone: String
  email: String
  description: String
  tagLine: JSON
  optionalTagLine: JSON
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Project {
  id: ID!
  title: String
  slug: String
  logo: Image
  favicon: Image
  phone: String
  email: String
  tagLine: JSON
  optionalTagLine: JSON
  description: JSON
  city: String
  address: String
  externalLink: String
  pricePolicy: String
  vatIncluded: Boolean
  forSale: Boolean
  svgViewbox: String
  stats: JSON
  benefits: JSON
  technicalDetails: JSON
  brochure: String
  mapCoordinates: String
  googleMapLink: String
  buildingSelectorBg: Image
  intro: File
  thumbnail: Image
  gallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  galleryCount(where: ImageWhereInput! = {}): Int
  moodGallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  moodGalleryCount(where: ImageWhereInput! = {}): Int
  modelsPreview(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  modelsPreviewCount(where: ImageWhereInput! = {}): Int
  interiorGallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  interiorGalleryCount(where: ImageWhereInput! = {}): Int
  exteriorGallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  exteriorGalleryCount(where: ImageWhereInput! = {}): Int
  lobbyGallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  lobbyGalleryCount(where: ImageWhereInput! = {}): Int
  timeline(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  timelineCount(where: EventWhereInput! = {}): Int
  features(
    where: FeatureWhereInput! = {}
    orderBy: [FeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Feature!]
  featuresCount(where: FeatureWhereInput! = {}): Int
  faqs(
    where: FaqWhereInput! = {}
    orderBy: [FaqOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faq!]
  faqsCount(where: FaqWhereInput! = {}): Int
  buildings(
    where: BuildingWhereInput! = {}
    orderBy: [BuildingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Building!]
  buildingsCount(where: BuildingWhereInput! = {}): Int
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  membersCount(where: MemberWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  logo: ImageWhereInput
  favicon: ImageWhereInput
  phone: StringFilter
  email: StringFilter
  city: StringFilter
  address: StringFilter
  externalLink: StringFilter
  pricePolicy: StringFilter
  vatIncluded: BooleanFilter
  forSale: BooleanFilter
  svgViewbox: StringFilter
  brochure: StringFilter
  mapCoordinates: StringFilter
  googleMapLink: StringFilter
  buildingSelectorBg: ImageWhereInput
  intro: FileWhereInput
  thumbnail: ImageWhereInput
  gallery: ImageManyRelationFilter
  moodGallery: ImageManyRelationFilter
  modelsPreview: ImageManyRelationFilter
  interiorGallery: ImageManyRelationFilter
  exteriorGallery: ImageManyRelationFilter
  lobbyGallery: ImageManyRelationFilter
  timeline: EventManyRelationFilter
  features: FeatureManyRelationFilter
  faqs: FaqManyRelationFilter
  buildings: BuildingManyRelationFilter
  units: UnitManyRelationFilter
  members: MemberManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input FeatureManyRelationFilter {
  every: FeatureWhereInput
  some: FeatureWhereInput
  none: FeatureWhereInput
}

input FaqManyRelationFilter {
  every: FaqWhereInput
  some: FaqWhereInput
  none: FaqWhereInput
}

input BuildingManyRelationFilter {
  every: BuildingWhereInput
  some: BuildingWhereInput
  none: BuildingWhereInput
}

input UnitManyRelationFilter {
  every: UnitWhereInput
  some: UnitWhereInput
  none: UnitWhereInput
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  city: OrderDirection
  address: OrderDirection
  externalLink: OrderDirection
  pricePolicy: OrderDirection
  vatIncluded: OrderDirection
  forSale: OrderDirection
  svgViewbox: OrderDirection
  brochure: OrderDirection
  mapCoordinates: OrderDirection
  googleMapLink: OrderDirection
}

input ProjectUpdateInput {
  title: String
  slug: String
  logo: ImageRelateToOneForUpdateInput
  favicon: ImageRelateToOneForUpdateInput
  phone: String
  email: String
  tagLine: JSON
  optionalTagLine: JSON
  description: JSON
  city: String
  address: String
  externalLink: String
  pricePolicy: String
  vatIncluded: Boolean
  forSale: Boolean
  svgViewbox: String
  stats: JSON
  benefits: JSON
  technicalDetails: JSON
  brochure: String
  mapCoordinates: String
  googleMapLink: String
  buildingSelectorBg: ImageRelateToOneForUpdateInput
  intro: FileRelateToOneForUpdateInput
  thumbnail: ImageRelateToOneForUpdateInput
  gallery: ImageRelateToManyForUpdateInput
  moodGallery: ImageRelateToManyForUpdateInput
  modelsPreview: ImageRelateToManyForUpdateInput
  interiorGallery: ImageRelateToManyForUpdateInput
  exteriorGallery: ImageRelateToManyForUpdateInput
  lobbyGallery: ImageRelateToManyForUpdateInput
  timeline: EventRelateToManyForUpdateInput
  features: FeatureRelateToManyForUpdateInput
  faqs: FaqRelateToManyForUpdateInput
  buildings: BuildingRelateToManyForUpdateInput
  units: UnitRelateToManyForUpdateInput
  members: MemberRelateToManyForUpdateInput
}

input FileRelateToOneForUpdateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input FeatureRelateToManyForUpdateInput {
  disconnect: [FeatureWhereUniqueInput!]
  set: [FeatureWhereUniqueInput!]
  create: [FeatureCreateInput!]
  connect: [FeatureWhereUniqueInput!]
}

input FaqRelateToManyForUpdateInput {
  disconnect: [FaqWhereUniqueInput!]
  set: [FaqWhereUniqueInput!]
  create: [FaqCreateInput!]
  connect: [FaqWhereUniqueInput!]
}

input BuildingRelateToManyForUpdateInput {
  disconnect: [BuildingWhereUniqueInput!]
  set: [BuildingWhereUniqueInput!]
  create: [BuildingCreateInput!]
  connect: [BuildingWhereUniqueInput!]
}

input UnitRelateToManyForUpdateInput {
  disconnect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  title: String
  slug: String
  logo: ImageRelateToOneForCreateInput
  favicon: ImageRelateToOneForCreateInput
  phone: String
  email: String
  tagLine: JSON
  optionalTagLine: JSON
  description: JSON
  city: String
  address: String
  externalLink: String
  pricePolicy: String
  vatIncluded: Boolean
  forSale: Boolean
  svgViewbox: String
  stats: JSON
  benefits: JSON
  technicalDetails: JSON
  brochure: String
  mapCoordinates: String
  googleMapLink: String
  buildingSelectorBg: ImageRelateToOneForCreateInput
  intro: FileRelateToOneForCreateInput
  thumbnail: ImageRelateToOneForCreateInput
  gallery: ImageRelateToManyForCreateInput
  moodGallery: ImageRelateToManyForCreateInput
  modelsPreview: ImageRelateToManyForCreateInput
  interiorGallery: ImageRelateToManyForCreateInput
  exteriorGallery: ImageRelateToManyForCreateInput
  lobbyGallery: ImageRelateToManyForCreateInput
  timeline: EventRelateToManyForCreateInput
  features: FeatureRelateToManyForCreateInput
  faqs: FaqRelateToManyForCreateInput
  buildings: BuildingRelateToManyForCreateInput
  units: UnitRelateToManyForCreateInput
  members: MemberRelateToManyForCreateInput
}

input FileRelateToOneForCreateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input FeatureRelateToManyForCreateInput {
  create: [FeatureCreateInput!]
  connect: [FeatureWhereUniqueInput!]
}

input FaqRelateToManyForCreateInput {
  create: [FaqCreateInput!]
  connect: [FaqWhereUniqueInput!]
}

input BuildingRelateToManyForCreateInput {
  create: [BuildingCreateInput!]
  connect: [BuildingWhereUniqueInput!]
}

input UnitRelateToManyForCreateInput {
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

type Feature {
  id: ID!
  title: String
  type: String
  titleTranslated: JSON
  description: JSON
  extraList: JSON
  gallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  galleryCount(where: ImageWhereInput! = {}): Int
}

input FeatureWhereUniqueInput {
  id: ID
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  id: IDFilter
  title: StringFilter
  type: StringFilter
  gallery: ImageManyRelationFilter
}

input FeatureOrderByInput {
  id: OrderDirection
  title: OrderDirection
  type: OrderDirection
}

input FeatureUpdateInput {
  title: String
  type: String
  titleTranslated: JSON
  description: JSON
  extraList: JSON
  gallery: ImageRelateToManyForUpdateInput
}

input FeatureUpdateArgs {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateInput!
}

input FeatureCreateInput {
  title: String
  type: String
  titleTranslated: JSON
  description: JSON
  extraList: JSON
  gallery: ImageRelateToManyForCreateInput
}

type Faq {
  id: ID!
  title: String
  titleTranslated: JSON
  description: JSON
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  title: StringFilter
}

input FaqOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input FaqUpdateInput {
  title: String
  titleTranslated: JSON
  description: JSON
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  title: String
  titleTranslated: JSON
  description: JSON
}

type Event {
  id: ID!
  title: String
  titleTranslated: JSON
  date: String
  done: Boolean
  gallery(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  galleryCount(where: ImageWhereInput! = {}): Int
  brochure: File
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  title: StringFilter
  date: StringFilter
  done: BooleanFilter
  gallery: ImageManyRelationFilter
  brochure: FileWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
  done: OrderDirection
}

input EventUpdateInput {
  title: String
  titleTranslated: JSON
  date: String
  done: Boolean
  gallery: ImageRelateToManyForUpdateInput
  brochure: FileRelateToOneForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  title: String
  titleTranslated: JSON
  date: String
  done: Boolean
  gallery: ImageRelateToManyForCreateInput
  brochure: FileRelateToOneForCreateInput
}

type Building {
  id: ID!
  title: String
  slug: String
  titleTranslated: JSON
  description: JSON
  status: String
  buildingOrientation: Int
  unitOrientationRotation: Int
  unitOrientation: String
  buildingSvg: String
  buildingPosition: String
  pinPosition: String
  floorLabelPosition: String
  svgViewbox: String
  floorplanDirections: JSON
  svgBackground: Image
  project: Project
  floors(
    where: FloorWhereInput! = {}
    orderBy: [FloorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Floor!]
  floorsCount(where: FloorWhereInput! = {}): Int
  linkToFloor: Floor
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
}

input BuildingWhereUniqueInput {
  id: ID
}

input BuildingWhereInput {
  AND: [BuildingWhereInput!]
  OR: [BuildingWhereInput!]
  NOT: [BuildingWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: StringFilter
  buildingOrientation: IntFilter
  unitOrientationRotation: IntNullableFilter
  buildingSvg: StringFilter
  buildingPosition: StringFilter
  pinPosition: StringFilter
  floorLabelPosition: StringFilter
  svgViewbox: StringFilter
  svgBackground: ImageWhereInput
  project: ProjectWhereInput
  floors: FloorManyRelationFilter
  linkToFloor: FloorWhereInput
  units: UnitManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloorManyRelationFilter {
  every: FloorWhereInput
  some: FloorWhereInput
  none: FloorWhereInput
}

input BuildingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  buildingOrientation: OrderDirection
  unitOrientationRotation: OrderDirection
  buildingSvg: OrderDirection
  buildingPosition: OrderDirection
  pinPosition: OrderDirection
  floorLabelPosition: OrderDirection
  svgViewbox: OrderDirection
}

input BuildingUpdateInput {
  title: String
  slug: String
  titleTranslated: JSON
  description: JSON
  status: String
  buildingOrientation: Int
  unitOrientationRotation: Int
  buildingSvg: String
  buildingPosition: String
  pinPosition: String
  floorLabelPosition: String
  svgViewbox: String
  floorplanDirections: JSON
  svgBackground: ImageRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  floors: FloorRelateToManyForUpdateInput
  linkToFloor: FloorRelateToOneForUpdateInput
  units: UnitRelateToManyForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input FloorRelateToManyForUpdateInput {
  disconnect: [FloorWhereUniqueInput!]
  set: [FloorWhereUniqueInput!]
  create: [FloorCreateInput!]
  connect: [FloorWhereUniqueInput!]
}

input FloorRelateToOneForUpdateInput {
  create: FloorCreateInput
  connect: FloorWhereUniqueInput
  disconnect: Boolean
}

input BuildingUpdateArgs {
  where: BuildingWhereUniqueInput!
  data: BuildingUpdateInput!
}

input BuildingCreateInput {
  title: String
  slug: String
  titleTranslated: JSON
  description: JSON
  status: String
  buildingOrientation: Int
  unitOrientationRotation: Int
  buildingSvg: String
  buildingPosition: String
  pinPosition: String
  floorLabelPosition: String
  svgViewbox: String
  floorplanDirections: JSON
  svgBackground: ImageRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
  floors: FloorRelateToManyForCreateInput
  linkToFloor: FloorRelateToOneForCreateInput
  units: UnitRelateToManyForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input FloorRelateToManyForCreateInput {
  create: [FloorCreateInput!]
  connect: [FloorWhereUniqueInput!]
}

input FloorRelateToOneForCreateInput {
  create: FloorCreateInput
  connect: FloorWhereUniqueInput
}

type Floor {
  id: ID!
  title: String
  slug: String
  titleTranslated: JSON
  disabled: Boolean
  floorSvg: String
  position: String
  pinPosition: String
  svgBackground: Image
  building: Building
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
}

input FloorWhereUniqueInput {
  id: ID
}

input FloorWhereInput {
  AND: [FloorWhereInput!]
  OR: [FloorWhereInput!]
  NOT: [FloorWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  disabled: BooleanFilter
  floorSvg: StringFilter
  position: StringFilter
  pinPosition: StringFilter
  svgBackground: ImageWhereInput
  building: BuildingWhereInput
  units: UnitManyRelationFilter
}

input FloorOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  disabled: OrderDirection
  floorSvg: OrderDirection
  position: OrderDirection
  pinPosition: OrderDirection
}

input FloorUpdateInput {
  title: String
  slug: String
  titleTranslated: JSON
  disabled: Boolean
  floorSvg: String
  position: String
  pinPosition: String
  svgBackground: ImageRelateToOneForUpdateInput
  building: BuildingRelateToOneForUpdateInput
  units: UnitRelateToManyForUpdateInput
}

input BuildingRelateToOneForUpdateInput {
  create: BuildingCreateInput
  connect: BuildingWhereUniqueInput
  disconnect: Boolean
}

input FloorUpdateArgs {
  where: FloorWhereUniqueInput!
  data: FloorUpdateInput!
}

input FloorCreateInput {
  title: String
  slug: String
  titleTranslated: JSON
  disabled: Boolean
  floorSvg: String
  position: String
  pinPosition: String
  svgBackground: ImageRelateToOneForCreateInput
  building: BuildingRelateToOneForCreateInput
  units: UnitRelateToManyForCreateInput
}

input BuildingRelateToOneForCreateInput {
  create: BuildingCreateInput
  connect: BuildingWhereUniqueInput
}

type UnitModel {
  id: ID!
  title: String
  rooms: Int
  roomSizes: JSON
  terraceSizes: JSON
  unitSvg: String
  image(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imageCount(where: ImageWhereInput! = {}): Int
  fisaTehnica: File
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
}

input UnitModelWhereUniqueInput {
  id: ID
}

input UnitModelWhereInput {
  AND: [UnitModelWhereInput!]
  OR: [UnitModelWhereInput!]
  NOT: [UnitModelWhereInput!]
  id: IDFilter
  title: StringFilter
  rooms: IntFilter
  unitSvg: StringFilter
  image: ImageManyRelationFilter
  fisaTehnica: FileWhereInput
  units: UnitManyRelationFilter
}

input UnitModelOrderByInput {
  id: OrderDirection
  title: OrderDirection
  rooms: OrderDirection
  unitSvg: OrderDirection
}

input UnitModelUpdateInput {
  title: String
  rooms: Int
  roomSizes: JSON
  terraceSizes: JSON
  unitSvg: String
  image: ImageRelateToManyForUpdateInput
  fisaTehnica: FileRelateToOneForUpdateInput
  units: UnitRelateToManyForUpdateInput
}

input UnitModelUpdateArgs {
  where: UnitModelWhereUniqueInput!
  data: UnitModelUpdateInput!
}

input UnitModelCreateInput {
  title: String
  rooms: Int
  roomSizes: JSON
  terraceSizes: JSON
  unitSvg: String
  image: ImageRelateToManyForCreateInput
  fisaTehnica: FileRelateToOneForCreateInput
  units: UnitRelateToManyForCreateInput
}

type Unit {
  id: ID!
  title: String
  slug: String
  titleTranslated: JSON
  floorplanPosition: String
  project: Project
  building: Building
  floor: Floor
  model: UnitModel
}

input UnitWhereUniqueInput {
  id: ID
}

input UnitWhereInput {
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  floorplanPosition: StringFilter
  project: ProjectWhereInput
  building: BuildingWhereInput
  floor: FloorWhereInput
  model: UnitModelWhereInput
}

input UnitOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  floorplanPosition: OrderDirection
}

input UnitUpdateInput {
  title: String
  slug: String
  titleTranslated: JSON
  floorplanPosition: String
  project: ProjectRelateToOneForUpdateInput
  building: BuildingRelateToOneForUpdateInput
  floor: FloorRelateToOneForUpdateInput
  model: UnitModelRelateToOneForUpdateInput
}

input UnitModelRelateToOneForUpdateInput {
  create: UnitModelCreateInput
  connect: UnitModelWhereUniqueInput
  disconnect: Boolean
}

input UnitUpdateArgs {
  where: UnitWhereUniqueInput!
  data: UnitUpdateInput!
}

input UnitCreateInput {
  title: String
  slug: String
  titleTranslated: JSON
  floorplanPosition: String
  project: ProjectRelateToOneForCreateInput
  building: BuildingRelateToOneForCreateInput
  floor: FloorRelateToOneForCreateInput
  model: UnitModelRelateToOneForCreateInput
}

input UnitModelRelateToOneForCreateInput {
  create: UnitModelCreateInput
  connect: UnitModelWhereUniqueInput
}

type Member {
  id: ID!
  title: String
  phone: String
  email: String
  role: JSON
  image: Image
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

input MemberWhereUniqueInput {
  id: ID
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  title: StringFilter
  phone: StringFilter
  email: StringFilter
  image: ImageWhereInput
  projects: ProjectManyRelationFilter
  articles: ArticleManyRelationFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  title: OrderDirection
  phone: OrderDirection
  email: OrderDirection
}

input MemberUpdateInput {
  title: String
  phone: String
  email: String
  role: JSON
  image: ImageRelateToOneForUpdateInput
  projects: ProjectRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  title: String
  phone: String
  email: String
  role: JSON
  image: ImageRelateToOneForCreateInput
  projects: ProjectRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

type Article {
  id: ID!
  title: String
  titleTranslated: JSON
  date: String
  author: Member
  featuredImage: Image
  content_ro: Article_content_ro_Document
  content_en: Article_content_en_Document
}

type Article_content_ro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Article_content_en_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  title: StringFilter
  date: StringFilter
  author: MemberWhereInput
  featuredImage: ImageWhereInput
}

input ArticleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
}

input ArticleUpdateInput {
  title: String
  titleTranslated: JSON
  date: String
  author: MemberRelateToOneForUpdateInput
  featuredImage: ImageRelateToOneForUpdateInput
  content_ro: JSON
  content_en: JSON
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  title: String
  titleTranslated: JSON
  date: String
  author: MemberRelateToOneForCreateInput
  featuredImage: ImageRelateToOneForCreateInput
  content_ro: JSON
  content_en: JSON
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

type File {
  id: ID!
  title: String
  file: FileFieldOutput
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  title: StringFilter
}

input FileOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input FileUpdateInput {
  title: String
  file: FileFieldInput
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  title: String
  file: FileFieldInput
}

type Image {
  id: ID!
  title: String
  image: ImageFieldOutput
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ImageUpdateInput {
  title: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  image: ImageFieldInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createDeveloper(data: DeveloperCreateInput!): Developer
  createDevelopers(data: [DeveloperCreateInput!]!): [Developer]
  updateDeveloper(
    where: DeveloperWhereUniqueInput!
    data: DeveloperUpdateInput!
  ): Developer
  updateDevelopers(data: [DeveloperUpdateArgs!]!): [Developer]
  deleteDeveloper(where: DeveloperWhereUniqueInput!): Developer
  deleteDevelopers(where: [DeveloperWhereUniqueInput!]!): [Developer]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createFeature(data: FeatureCreateInput!): Feature
  createFeatures(data: [FeatureCreateInput!]!): [Feature]
  updateFeature(
    where: FeatureWhereUniqueInput!
    data: FeatureUpdateInput!
  ): Feature
  updateFeatures(data: [FeatureUpdateArgs!]!): [Feature]
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatures(where: [FeatureWhereUniqueInput!]!): [Feature]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createBuilding(data: BuildingCreateInput!): Building
  createBuildings(data: [BuildingCreateInput!]!): [Building]
  updateBuilding(
    where: BuildingWhereUniqueInput!
    data: BuildingUpdateInput!
  ): Building
  updateBuildings(data: [BuildingUpdateArgs!]!): [Building]
  deleteBuilding(where: BuildingWhereUniqueInput!): Building
  deleteBuildings(where: [BuildingWhereUniqueInput!]!): [Building]
  createFloor(data: FloorCreateInput!): Floor
  createFloors(data: [FloorCreateInput!]!): [Floor]
  updateFloor(where: FloorWhereUniqueInput!, data: FloorUpdateInput!): Floor
  updateFloors(data: [FloorUpdateArgs!]!): [Floor]
  deleteFloor(where: FloorWhereUniqueInput!): Floor
  deleteFloors(where: [FloorWhereUniqueInput!]!): [Floor]
  createUnitModel(data: UnitModelCreateInput!): UnitModel
  createUnitModels(data: [UnitModelCreateInput!]!): [UnitModel]
  updateUnitModel(
    where: UnitModelWhereUniqueInput!
    data: UnitModelUpdateInput!
  ): UnitModel
  updateUnitModels(data: [UnitModelUpdateArgs!]!): [UnitModel]
  deleteUnitModel(where: UnitModelWhereUniqueInput!): UnitModel
  deleteUnitModels(where: [UnitModelWhereUniqueInput!]!): [UnitModel]
  createUnit(data: UnitCreateInput!): Unit
  createUnits(data: [UnitCreateInput!]!): [Unit]
  updateUnit(where: UnitWhereUniqueInput!, data: UnitUpdateInput!): Unit
  updateUnits(data: [UnitUpdateArgs!]!): [Unit]
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteUnits(where: [UnitWhereUniqueInput!]!): [Unit]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
}

type Query {
  developers(
    where: DeveloperWhereInput! = {}
    orderBy: [DeveloperOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Developer!]
  developer(where: DeveloperWhereUniqueInput!): Developer
  developersCount(where: DeveloperWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  features(
    where: FeatureWhereInput! = {}
    orderBy: [FeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Feature!]
  feature(where: FeatureWhereUniqueInput!): Feature
  featuresCount(where: FeatureWhereInput! = {}): Int
  faqs(
    where: FaqWhereInput! = {}
    orderBy: [FaqOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  buildings(
    where: BuildingWhereInput! = {}
    orderBy: [BuildingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Building!]
  building(where: BuildingWhereUniqueInput!): Building
  buildingsCount(where: BuildingWhereInput! = {}): Int
  floors(
    where: FloorWhereInput! = {}
    orderBy: [FloorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Floor!]
  floor(where: FloorWhereUniqueInput!): Floor
  floorsCount(where: FloorWhereInput! = {}): Int
  unitModels(
    where: UnitModelWhereInput! = {}
    orderBy: [UnitModelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UnitModel!]
  unitModel(where: UnitModelWhereUniqueInput!): UnitModel
  unitModelsCount(where: UnitModelWhereInput! = {}): Int
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unit(where: UnitWhereUniqueInput!): Unit
  unitsCount(where: UnitWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  files(
    where: FileWhereInput! = {}
    orderBy: [FileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
